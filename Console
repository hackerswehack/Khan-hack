const ver = "V3.1.0";
let isDev = false;

const repoPath = `https://raw.githubusercontent.com/Niximkk/Khanware/refs/heads/${isDev ? "dev/" : "main/"}`;

// Device detection
let device = {
    mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Mobile|Tablet|Kindle|Silk|PlayBook|BB10/i.test(navigator.userAgent),
    apple: /iPhone|iPad|iPod|Macintosh|Mac OS X/i.test(navigator.userAgent)
};

// User information
let user = {
    username: "Username",
    nickname: "Nickname",
    UID: 0
};

let loadedPlugins = [];

// Elements for UI
const splashScreen = document.createElement('div');

// Globals for features
window.features = {
    autoAnswer: true,
    questionSpoof: true,
    darkModeEnabled: false,
    minuteFarmerEnabled: false,
    rgbLogoEnabled: false,
    onekoJsEnabled: false,
};

// Function to create a delay
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Function to play audio
const playAudio = url => {
    const audio = new Audio(url);
    audio.play();
};

// Function to display a Toast (notification)
function sendToast(text, duration = 3000) {
    const Toast = Toastify({
        text: text,
        duration: duration,
        gravity: 'bottom',
        position: "center",
        stopOnFocus: true,
        style: {
            background: "#003366",
            color: '#ffffff',
            padding: '10px 20px',
            borderRadius: '5px'
        }
    });
    Toast.showToast();
}

// Function to load an external script
async function loadScript(url) {
    const response = await fetch(url);
    const script = await response.text();
    eval(script);
}

// Function to spoof questions
function spoofQuestion() {
    // Your implementation...
}

// Function to automatically answer questions
function autoAnswer() {
    // Your implementation...
}

// Function to show splash screen
async function showSplashScreen() {
    splashScreen.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.5s ease;
        user-select: none;
        font-family: MuseoSans, sans-serif;
        font-size: 50px;
    `;
    splashScreen.innerHTML = `<span style="color: blue;">KHAN</span><span style="color: red;"> HACK</span>`;
    document.body.appendChild(splashScreen);
    setTimeout(() => { splashScreen.style.opacity = '1'; }, 10);
    await delay(2000);
    splashScreen.style.opacity = '0';
    await delay(500);
    splashScreen.remove();
}

// Create a global variable for the mod menu
let modMenu;

// Function to create a mod menu
function createModMenu() {
    const menuContainer = document.createElement('div');
    menuContainer.style.position = 'fixed';
    menuContainer.style.top = '10px'; 
    menuContainer.style.right = '10px'; 
    menuContainer.style.zIndex = '9999';
    menuContainer.style.padding = '10px';
    menuContainer.style.backgroundColor = '#444';
    menuContainer.style.borderRadius = '5px';
    menuContainer.style.color = '#fff';
    menuContainer.style.display = 'none'; // Start hidden
    menuContainer.style.flexDirection = 'column'; 
    menuContainer.style.gap = '5px'; 

    const title = document.createElement('h4');
    title.innerText = 'Mod Menu';
    title.style.margin = '0 0 10px 0';
    menuContainer.appendChild(title);

    // Auto Answer toggle
    const autoAnswerButton = createToggleButton('Auto Answer', window.features.autoAnswer, (isEnabled) => {
        window.features.autoAnswer = isEnabled;
        sendToast(`Auto Answer is now ${isEnabled ? 'enabled' : 'disabled'}.`);
    });
    menuContainer.appendChild(autoAnswerButton);

    // Question Spoof toggle
    const questionSpoofButton = createToggleButton('Question Spoof', window.features.questionSpoof, (isEnabled) => {
        window.features.questionSpoof = isEnabled;
        sendToast(`Question Spoofing is now ${isEnabled ? 'enabled' : 'disabled'}.`);
    });
    menuContainer.appendChild(questionSpoofButton);

    // Dark Mode toggle
    const darkModeButton = createToggleButton('Dark Mode', window.features.darkModeEnabled, (isEnabled) => {
        window.features.darkModeEnabled = isEnabled;
        if (isEnabled) {
            enableDarkMode();
            sendToast("🌑 Dark Mode Activated", 2000);
        } else {
            disableDarkMode();
            sendToast("🌕 Dark Mode Deactivated", 2000);
        }
    });
    menuContainer.appendChild(darkModeButton);

    // Minute Farmer toggle
    const minuteFarmerButton = createToggleButton('Minute Farmer', window.features.minuteFarmerEnabled, (isEnabled) => {
        window.features.minuteFarmerEnabled = isEnabled;
        if (isEnabled) {
            startMinuteFarmer();
            sendToast("🚜 Minute Farmer Activated", 2000);
        } else {
            stopMinuteFarmer();
            sendToast("🚜 Minute Farmer Deactivated", 2000);
        }
    });
    menuContainer.appendChild(minuteFarmerButton);

    // RGB Logo toggle
    const rgbLogoButton = createToggleButton('RGB Logo', window.features.rgbLogoEnabled, (isEnabled) => {
        window.features.rgbLogoEnabled = isEnabled;
        if (isEnabled) {
            startRGBLogo();
            sendToast("🌈 RGB Logo Activated", 2000);
        } else {
            stopRGBLogo();
            sendToast("🌈 RGB Logo Deactivated", 2000);
        }
    });
    menuContainer.appendChild(rgbLogoButton);

    // OnekoJS toggle
    const onekoJsButton = createToggleButton('OnekoJS', window.features.onekoJsEnabled, (isEnabled) => {
        window.features.onekoJsEnabled = isEnabled;
        if (isEnabled) {
            startOnekoJs();
        } else {
            stopOnekoJs();
        }
    });
    menuContainer.appendChild(onekoJsButton);

    // Add the menu to the body
    document.body.appendChild(menuContainer);

    // Return the menu for toggling visibility
    return menuContainer;
}

// Helper function to create a toggle button
function createToggleButton(label, initialValue, onToggle) {
    const button = document.createElement('button');
    button.innerText = `${label}: ${initialValue ? 'ON' : 'OFF'}`;
    button.style.backgroundColor = initialValue ? '#28A745' : '#DC3545';
    button.style.color = '#fff';
    button.style.border = 'none';
    button.style.borderRadius = '5px';
    button.style.cursor = 'pointer';
    button.style.padding = '5px';

    button.addEventListener('click', () => {
        const newValue = !initialValue;
        onToggle(newValue);
        button.innerText = `${label}: ${newValue ? 'ON' : 'OFF'}`;
        button.style.backgroundColor = newValue ? '#28A745' : '#DC3545';
        initialValue = newValue;
    });

    return button;
}

// Enable dark mode
function enableDarkMode() {
    loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js').then(async () => {
        DarkReader.setFetchMethod(window.fetch);
        DarkReader.enable();
    });
}

// Disable dark mode
function disableDarkMode() {
    if (typeof DarkReader !== 'undefined') {
        DarkReader.disable();
    }
}

// Minute Farmer implementation
function startMinuteFarmer() {
    console.log('Minute Farmer started.');
    if (!window.minuteFarmerInterval) {
        window.minuteFarmerInterval = setInterval(() => {
            console.log('Minute Farmer working...'); 
        }, 60000); 
    }
}

function stopMinuteFarmer() {
    console.log('Minute Farmer stopped.');
    clearInterval(window.minuteFarmerInterval); 
    window.minuteFarmerInterval = null;
}

// RGB Logo implementation
let rgbLogoInterval; 

function startRGBLogo() {
    const logo = document.querySelector('.Khan-logo'); 
    if (logo) {
        console.log('RGB Logo started.');
        logo.style.transition = "color 0.5s";
        const colors = ['red', 'green', 'blue', 'yellow', 'purple'];
        let index = 0;

        rgbLogoInterval = setInterval(() => {
            logo.style.color = colors[index % colors.length];
            index++;
        }, 500); 
    } else {
        console.warn('Logo element not found for RGB effect.');
    }
}

function stopRGBLogo() {
    console.log('RGB Logo stopped.');
    clearInterval(rgbLogoInterval); 
    const logo = document.querySelector('.Khan-logo'); 
    if (logo) {
        logo.style.color = ''; 
    }
}

// OnekoJS functionality
function startOnekoJs() {
    // URL to the OnekoJS library
    const onekoJsUrl = 'https://cdn.jsdelivr.net/gh/otherwise/oneko.js/oneko.js';

    loadScript(onekoJsUrl).then(() => {
        const oneko = new Oneko();
        oneko.start(); 
        sendToast("🐾 OnekoJS Activated", 2000);
    }).catch(err => {
        console.error('Failed to load OnekoJS:', err);
        sendToast("Failed to load OnekoJS.", 3000);
    });
}

function stopOnekoJs() {
    console.log('OnekoJS stopped.');
    if (typeof Oneko !== 'undefined') {
        const oneko = new Oneko();
        oneko.stop();
    } else {
        console.warn('OnekoJS is not defined or already stopped.');
    }
}

// Check if script is running on the correct website
if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) {
    alert("❌ Khanware Failed to Inject!\n\nYou must run Khanware on the Khan Academy website! (https://pt.khanacademy.org/)");
    window.location.href = "https://pt.khanacademy.org/";
}

// Load Dark Reader and activate
loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js').then(async () => {
    DarkReader.setFetchMethod(window.fetch);
    sendToast("THE HACK WAS SUCCESSFUL!", 5000);
    await delay(1000);
    sendToast("🌑 Dark Mode Activated", 2000);
});

// Load Toastify CSS and then start features
loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css').then(async () => {
    loadScript('https://cdn.jsdelivr.net/npm/toastify-js').then(async () => {
        sendToast("Khan Hack Is successfully injected into your Khan Academy", 5000);
        spoofQuestion();
        autoAnswer();
        console.clear();

        // Create the mod menu
        modMenu = createModMenu(); 

        // Set up the panic button to toggle the mod menu visibility
        document.addEventListener('keydown', (event) => {
            if (event.key === 'p' || event.key === 'P') {
                modMenu.style.display = modMenu.style.display === 'none' ? 'flex' : 'none';
            }
        });

        // Display the startup screen
        await showSplashScreen();
    });
});
