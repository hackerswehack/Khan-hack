const ver = "V3.0.8";
let isDev = false;
const repoPath = `https://raw.githubusercontent.com/Niximkk/Khanware/refs/heads/${isDev ? "dev/" : "main/"}`;

// Device detection
let device = {
    mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Mobile|Tablet|Kindle|Silk|PlayBook|BB10/i.test(navigator.userAgent),
    apple: /iPhone|iPad|iPod|Macintosh|Mac OS X/i.test(navigator.userAgent)
};

/* User */
let user = {
    username: "Username",
    nickname: "Nickname",
    UID: 0
}

let loadedPlugins = [];

/* Elements */
const splashScreen = document.createElement('div');

/* Globals */
window.features = {
    questionSpoof: true,
    videoSpoof: true,
    autoAnswer: true,
    customBanner: false
};

window.featureConfigs = {
    autoAnswerDelay: 3,
    customUsername: "",
    customPfp: "",
    initialDelay: 1000,
    subsequentDelays: [200, 600, 300, 1200]
};

/* Security */
document.addEventListener('contextmenu', (e) => !window.disableSecurity && e.preventDefault());
document.addEventListener('keydown', (e) => {
    if (!window.disableSecurity && (e.key === 'F12' || (e.ctrlKey && e.shiftKey && ['I', 'C', 'J'].includes(e.key)))) {
        e.preventDefault();
    }
});

/* EventEmitter */
class EventEmitter {
    constructor() { this.events = {}; }
   
    on(t, e) {
        if (typeof t === "string") t = [t];
        t.forEach(t => {
            this.events[t] || (this.events[t] = []);
            this.events[t].push(e);
        });
    }
   
    off(t, e) {
        if (typeof t === "string") t = [t];
        t.forEach(t => {
            this.events[t] && (this.events[t] = this.events[t].filter(t => t !== e));
        });
    }
   
    emit(t, ...e) {
        this.events[t] && this.events[t].forEach(t => { t(...e); });
    }
}

const plppdo = new EventEmitter();

new MutationObserver((mutationsList) => {
    for (let mutation of mutationsList)
        if (mutation.type === 'childList') plppdo.emit('domChanged');
}).observe(document.body, { childList: true, subtree: true });

/* Misc Functions */
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
const playAudio = url => {
    const audio = new Audio(url);
    audio.play();
};
function sendToast(text, duration = 5000, gravity = 'bottom') {
    Toastify({ text: text, duration: duration, gravity: gravity, position: "center", stopOnFocus: true }).showToast();
}

/* Load scripts */
async function loadScript(url, label) {
    const response = await fetch(url);
    const script = await response.text();
    loadedPlugins.push(label);
    eval(script);
}

async function loadCss(url) {
    return new Promise((resolve) => {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = url;
        link.onload = () => resolve();
        document.head.appendChild(link);
    });
}

/* Splash Screen */
async function showSplashScreen() {
    splashScreen.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.5s ease;
        user-select: none;
        font-family: MuseoSans, sans-serif;
        font-size: 50px;
        text-align: center;
        color: white;
    `;
    splashScreen.innerHTML = '<span style="color:white;">KHANWARE</span><span style="color:#72ff72;">.SPACE</span>';
    document.body.appendChild(splashScreen);
    setTimeout(() => splashScreen.style.opacity = '1', 10);
    await delay(2000);
    splashScreen.style.opacity = '0';
    await delay(500);
    splashScreen.remove();
}

/* Autoinject Logic */
if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) {
    alert("‚ùå Khanware Failed to Inject!\n\nYou need to run Khanware on the Khan Academy site! (https://pt.khanacademy.org/)");
    window.location.href = "https://pt.khanacademy.org/";
}

showSplashScreen();

// Load necessary external scripts
loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js').then(async () => {
    DarkReader.setFetchMethod(window.fetch);
    DarkReader.enable();
});

loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css').then(async () => {
    loadScript('https://cdn.jsdelivr.net/npm/toastify-js').then(async () => {
        sendToast("Khan Hack Is successfully injected into your Khan Academy", 5000, 'bottom');
        window.features.autoAnswer = true;
        console.clear();
        await showSplashScreen();
       
        // Start auto-answer functionality
        autoAnswer();
    });
});

/* Spoof and AutoAnswer Logic */
async function spoofQuestion() {
    const phrases = [
        "üéÆüí£ Khan Hack On Top Gang",
        "üêà‚Äç‚¨õüë®üèø That's a black man...",
        "If you have this you're lucky",
    ];

    const originalFetch = window.fetch;
    window.fetch = async function (input, init) {
        let body;
        if (input instanceof Request) body = await input.clone().text();
        else if (init && init.body) body = init.body;

        const originalResponse = await originalFetch.apply(this, arguments);
        const clonedResponse = originalResponse.clone();

        try {
            const responseBody = await clonedResponse.text();
            let responseObj = JSON.parse(responseBody);

            if (responseObj?.data?.assessmentItem?.item?.itemData) {
                let itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);

                if (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
                    itemData.answerArea = {
                        "calculator": false,
                        "chi2Table": false,
                        "periodicTable": false,
                        "tTable": false,
                        "zTable": false
                    };

                    itemData.question.content = phrases[Math.floor(Math.random() * phrases.length)] + `[[‚òÉ radio 1]]`;
                    itemData.question.widgets = {
                        "radio 1": {
                            options: {
                                choices: [
                                    { content: "Correct answer.", correct: true },
                                    { content: "Incorrect answer.", correct: false }
                                ]
                            }
                        }
                    };

                    responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);
                    sendToast("üîì Question Successfully Hacked.", 1000);

                    return new Response(JSON.stringify(responseObj), {
                        status: originalResponse.status,
                        statusText: originalResponse.statusText,
                        headers: originalResponse.headers
                    });
                }
            }
        } catch (e) {
            console.error("Error parsing response:", e);
        }

        return originalResponse;
    };
}

async function autoAnswer() {
    const baseClasses = ["_s6zfc1u", "_ssxvf9l", "_4i5p5ae", "_1r8cd7xe", "_1yok8f4"];
    while (true) {
        if (window.features.autoAnswer && window.features.questionSpoof) {
            await delay(featureConfigs.initialDelay);
            for (let i = 0; i < baseClasses.length; i++) {
                const clicked = findAndClickByClass(baseClasses[i]);
                if (clicked && i < baseClasses.length - 1) {
                    const nextDelay = featureConfigs.subsequentDelays[i % featureConfigs.subsequentDelays.length];
                    await delay(nextDelay);
                }
            }
        } else {
            await delay(1000);
        }
    }
}

function findAndClickByClass(className) {
    const element = document.getElementsByClassName(className)[0];
    if (element) {
        element.click();
        if (element.textContent === 'Show Summary') {
            sendToast("üéâ Exercise Completed!", 3000);
            playAudio('https://r2.e-z.host/4d0a0bea-60f8-44d6-9e74-3032a64a9f32/4x5g14gj.wav');
        }
    }
    return !!element;
}

/* Initialize functionalities */
spoofQuestion();
autoAnswer();
