const ver = "V3.0.5";

// Delay settings for the functionalities
const featureConfigs = {
    initialDelay: 1000,
    subsequentDelays: [200, 600, 300, 1200]
};

// Configuration of features
window.features = {
    autoAnswer: true,
    questionSpoof: true,
    darkModeEnabled: false // Dark mode status
};

// Function to create a delay
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Function to play audio
const playAudio = url => {
    const audio = new Audio(url);
    audio.play();
};

// Function to display a Toast (notification)
function sendToast(text, duration = 3000, gravity = 'bottom', imageUrl = null, fontSize = '16px', fontFamily = 'Arial, sans-serif', color = '#ffffff') {
    const Toast = Toastify({
        text: text,
        duration: duration,
        gravity: gravity,
        position: "center",
        stopOnFocus: true,
        style: {
            background: "#003366",
            fontSize: fontSize,
            fontFamily: fontFamily,
            color: color,
            padding: '10px 20px',
            borderRadius: '5px',
            display: 'flex',
            alignItems: 'center'
        }
    });

    if (imageUrl) {
        const img = document.createElement('img');
        img.src = imageUrl;
        img.style.width = '20px';
        img.style.height = '20px';
        img.style.marginRight = '10px';
        Toast.toastElement.prepend(img);
    }

    Toast.showToast();
}

// Function to find and click on an element by class
function findAndClickByClass(className) {
    const element = document.getElementsByClassName(className)[0];
    if (element) {
        element.click();
        if (element.textContent === 'Show Summary') {
            sendToast("🎉 Exercise Completed!", 3000);
            playAudio('https://r2.e-z.host/4d0a0bea-60f8-44d6-9e74-3032a64a9f32/4x5g14gj.wav');
        }
    }
    return !!element;
}

// Function to load an external script
async function loadScript(url) {
    const response = await fetch(url);
    const script = await response.text();
    eval(script);
}

// Function to upload an external CSS file
async function loadCss(url) {
    return new Promise((resolve) => {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = url;
        link.onload = () => resolve();
        document.head.appendChild(link);
    });
}

// Function to modify questions (spoof)
function spoofQuestion() {
    const phrases = [
        "🎮💣 Khan Hack On Top Gang",
        "🐈‍⬛👨🏿 That's a black man...",
        "If you have this you're lucky",
    ];

    const originalFetch = window.fetch;
    window.fetch = async function (input, init) {
        let body;
        if (input instanceof Request) body = await input.clone().text();
        else if (init && init.body) body = init.body;

        const originalResponse = await originalFetch.apply(this, arguments);
        const clonedResponse = originalResponse.clone();

        try {
            const responseBody = await clonedResponse.text();
            let responseObj = JSON.parse(responseBody);

            if (responseObj?.data?.assessmentItem?.item?.itemData) {
                let itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);

                if (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
                    itemData.answerArea = {
                        "calculator": false,
                        "chi2Table": false,
                        "periodicTable": false,
                        "tTable": false,
                        "zTable": false
                    };

                    itemData.question.content = phrases[Math.floor(Math.random() * phrases.length)] + `[[☃ radio 1]]`;
                    itemData.question.widgets = {
                        "radio 1": {
                            options: {
                                choices: [
                                    { content: "Correct answer.", correct: true },
                                    { content: "Incorrect answer.", correct: false }
                                ]
                            }
                        }
                    };

                    responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);
                    sendToast("🔓 Question Successfully Hacked.", 1000);

                    return new Response(JSON.stringify(responseObj), {
                        status: originalResponse.status,
                        statusText: originalResponse.statusText,
                        headers: originalResponse.headers
                    });
                }
            }
        } catch (e) {
            console.error("Error parsing response:", e);
        }

        return originalResponse;
    };
}

// Function to automatically answer questions
function autoAnswer() {
    (async () => {
        const baseClasses = ["_s6zfc1u", "_ssxvf9l", "_4i5p5ae", "_1r8cd7xe", "_1yok8f4"];

        while (true) {
            if (window.features.autoAnswer && window.features.questionSpoof) {
                await delay(featureConfigs.initialDelay);

                for (let i = 0; i < baseClasses.length; i++) {
                    const clicked = findAndClickByClass(baseClasses[i]);
                    if (clicked && i < baseClasses.length - 1) {
                        const nextDelay = featureConfigs.subsequentDelays[i % featureConfigs.subsequentDelays.length];
                        await delay(nextDelay);
                    }
                }
            } else {
                await delay(1000);
            }
        }
    })();
}

// Function to display a splash screen
async function showSplashScreen() {
    const splashScreen = document.createElement('div');
    splashScreen.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.5s ease;
        user-select: none;
        font-family: MuseoSans, sans-serif;
        font-size: 50px; /* Increased font size */
        text-align: center;
    `;

    // Set the splash screen content with custom styles
    splashScreen.innerHTML = `
        <span style="color: blue;">KHAN</span>
        <span style="color: red;"> FUCCKER</span>
    `;

    document.body.appendChild(splashScreen);
    
    // Fade-in effect
    setTimeout(() => {
        splashScreen.style.opacity = '1';
    }, 10);

    // Keep the splash screen visible for 2 seconds
    await delay(2000);

    // Fade-out effect
    splashScreen.style.opacity = '0';
    await delay(500); // Wait for the fade-out transition to complete
    splashScreen.remove();
}

// Function to create a mod menu
function createModMenu() {
    const menuContainer = document.createElement('div');
    menuContainer.style.position = 'fixed';
    menuContainer.style.top = '10px';
    menuContainer.style.right = '10px';
    menuContainer.style.zIndex = '9999';
    menuContainer.style.padding = '10px';
    menuContainer.style.backgroundColor = '#444';
    menuContainer.style.borderRadius = '5px';
    menuContainer.style.color = '#fff';

    const title = document.createElement('h4');
    title.innerText = 'Mod Menu';
    title.style.margin = '0 0 10px 0';
    menuContainer.appendChild(title);

    // Auto Answer toggle
    const autoAnswerButton = document.createElement('button');
    autoAnswerButton.innerText = `Auto Answer: ${window.features.autoAnswer ? 'ON' : 'OFF'}`;
    autoAnswerButton.style.marginBottom = '5px';
    autoAnswerButton.style.backgroundColor = '#007BFF';
    autoAnswerButton.style.color = '#fff';
    autoAnswerButton.style.border = 'none';
    autoAnswerButton.style.borderRadius = '5px';
    autoAnswerButton.style.cursor = 'pointer';
    autoAnswerButton.style.padding = '5px';

    autoAnswerButton.addEventListener('click', () => {
        window.features.autoAnswer = !window.features.autoAnswer;
        autoAnswerButton.innerText = `Auto Answer: ${window.features.autoAnswer ? 'ON' : 'OFF'}`;
        sendToast(`Auto Answer is now ${window.features.autoAnswer ? 'enabled' : 'disabled'}.`, 3000);
    });
    menuContainer.appendChild(autoAnswerButton);

    // Question Spoof toggle
    const questionSpoofButton = document.createElement('button');
    questionSpoofButton.innerText = `Question Spoof: ${window.features.questionSpoof ? 'ON' : 'OFF'}`;
    questionSpoofButton.style.marginBottom = '5px';
    questionSpoofButton.style.backgroundColor = '#28A745';
    questionSpoofButton.style.color = '#fff';
    questionSpoofButton.style.border = 'none';
    questionSpoofButton.style.borderRadius = '5px';
    questionSpoofButton.style.cursor = 'pointer';
    questionSpoofButton.style.padding = '5px';

    questionSpoofButton.addEventListener('click', () => {
        window.features.questionSpoof = !window.features.questionSpoof;
        questionSpoofButton.innerText = `Question Spoof: ${window.features.questionSpoof ? 'ON' : 'OFF'}`;
        sendToast(`Question Spoofing is now ${window.features.questionSpoof ? 'enabled' : 'disabled'}.`, 3000);
    });
    menuContainer.appendChild(questionSpoofButton);

    // Dark Mode toggle
    const darkModeButton = document.createElement('button');
    darkModeButton.innerText = `Dark Mode: ${window.features.darkModeEnabled ? 'ON' : 'OFF'}`;
    darkModeButton.style.marginBottom = '5px';
    darkModeButton.style.backgroundColor = '#6F42C1';
    darkModeButton.style.color = '#fff';
    darkModeButton.style.border = 'none';
    darkModeButton.style.borderRadius = '5px';
    darkModeButton.style.cursor = 'pointer';
    darkModeButton.style.padding = '5px';

    darkModeButton.addEventListener('click', () => {
        window.features.darkModeEnabled = !window.features.darkModeEnabled;
        darkModeButton.innerText = `Dark Mode: ${window.features.darkModeEnabled ? 'ON' : 'OFF'}`;

        if (window.features.darkModeEnabled) {
            enableDarkMode();
            sendToast("🌑 Dark Mode Activated", 2000);
        } else {
            disableDarkMode();
            sendToast("🌕 Dark Mode Deactivated", 2000);
        }
    });
    menuContainer.appendChild(darkModeButton);

    // Add the menu to the body
    document.body.appendChild(menuContainer);
}

// Enable dark mode
function enableDarkMode() {
    loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js').then(async () => {
        DarkReader.setFetchMethod(window.fetch);
        DarkReader.enable();
    });
}

// Disable dark mode
function disableDarkMode() {
    if (typeof DarkReader !== 'undefined') {
        DarkReader.disable();
    }
}

// Check that the script is running on the correct website
if (!/^https?:\/\/en\.khanacademy\.org/.test(window.location.href)) {
    alert("Bruh Khan Hack Couldn't inject\nYou need to run Khan Hack from the Khan Academy website! (https://en.khanacademy.org/)");
    window.location.href = "https://en.khanacademy.org/";
}

// Load the Dark Reader and activate dark mode
loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js').then(async () => {
    DarkReader.setFetchMethod(window.fetch);
    
    // Display the warning "Warning"
    sendToast("THE HACK WAS SUCCESSFUL!", 5000, 'top', null, '20px', 'Arial, sans-serif', '#00ff00');

    // Wait 1 second before displaying the Dark Mode toast
    await delay(1000);

    // Display the Dark Mode toast with the image
    sendToast("🌑 Dark Mode Activated", 2000, 'bottom', 'https://cdn.discordapp.com/attachments/1326756804889280553/1351333793306247220/6c0df6a95ea7f835588f586a11bdbd4e.png?ex=67d9ff2a&is=67d8adaa&hm=1992d77fc05bd65a4417da3e860cead36b2d62395a28f1b6598d43a0ab953cc0&');
});

// Load Toastify CSS and then start features
loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css').then(async () => {
    // Load Toastify and start the features
    loadScript('https://cdn.jsdelivr.net/npm/toastify-js').then(async () => {
        sendToast("Khan Hack Is successfully injected into your Khan Academy", 5000, 'bottom');
        spoofQuestion();
        autoAnswer();
        console.clear();

        // Create the mod menu
        createModMenu();

        // Display the startup screen
        await showSplashScreen();
    });
});
